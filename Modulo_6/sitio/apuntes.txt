1. Crear entorno virtual:
    python3 -m venv .venv #. para que git lo ignore

2. Importar Django:
    pip install django

3. Guardar versiones y módulos importados:
    pip freeze > requirements.txt

4. Crear proyecto:
    django-admin startproject sitio

5. Crear app (dentro de la carpeta del proyecto):
    django-admin startapp sitio_app

6. agregar APP a settings.py:
    agregar 'landing' a la lista 'INSTALLED_APPS'

7. modificar views.py en carpeta de APP:
  
   -Request representa el request que hace el usuario al servidor

    def index(request):
        return(render(request, "landing/index.html")) #se agrega render para indicar que debe renderizar el template indicado.

    #esa ubicación dirige a un template (index.html) ubicado en la carpeta de la app/templates/app, que hay que crear.

8. Crear urls.py de APP:

    from django.urls import path #para que pueda acceder al urls.py del PROYECTO
    from . import views #para que se pueda acceder a views.py
    urlpatterns = [
        path("", views.index, name = "index")]

        # "" está vacío porque no se le dará argumentos al final de la ruta
        # views.index es la función de views.py, que define qué se mostrará
        # name = "index" se le da nombre, para poder referenciarlo desde otras apps.

9. Modificar urls.py de PROYECTO:

    -agregar 'include' al import de django.urls:
        from django.urls import include, path

    -agregar un item a url_patterns:
        path('landing', include("landing.urls")) # para poder usar urls.py de la APP
    
10. Iniciar servidor en la terminal:

    python3 manage.py runserver



Para agregar template con bootstrap:

https://www.w3schools.com/django/django_add_bootstrap5.php



ADMIN

You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.

hay un service manager para cada tipo de DB. EN Sqlite3 es dbbrowser (python manage.py migrate)

tabla auth:user

select * from auth_user
  sino directo por shell

 python3 manage.py createsuperuser

select * from auth_user : muestra password encriptada

    models.py > migrate
    nombreclase(models.Model)
        def init
           self. atributo  = models.charfield(maxlenght bla bla)
           NO USA INIT__


los modelos también se debe registrar en admin.py

debe tener from .import models
admin.site.register(model.nombreclase) #ahora aparece en la db al verla en el admin

cada vez que se hace un cambio en un modelo hay que migrar



tarea 3.

1. crear usuarios en admin. Cada usuario tendrá nombre, apellido y mail (3 atributos)
2. en el index.html de la carpeta templates/mi_app se hará una lista ordenada que tendrá un loop for para cada usuario.
3. en el views.py se dará un tercer atributo, un diccionario asociado a una variable (que se define en el mismo views, 
pero antes de la función index), que a su vez va a sacar datos de la base de datos.


<FORMULARIO>

1. models.py

    a. Crear modelos. 
        -Cada clase debe heredar de (models.Model).
        -Se define cada campo como una variable, asignada a un 'model data type' que indica el tipo de dato que se almacenará en la db.
        
        ej:
        class Persona(models.Model):
            rut = models.CharField(max_lenght=11)
            nombre = models.CharField(max_length=40)
            apellidos = models.CharField(max_length=70)
            ... etc

        - se puede definir un __str__ para que en el campo del objeto se vea su nombre:
            def __str__(self):
                return f"{self.nombre} {self.apellidos}"
    b. Hacer las migraciones, para que los modelos se agreguen a la base de datos:
        
        $ python3 manage.py makemigrations nombre_app #importante indicar el nombre de la app si es que hay más de una app.
        $ python3 maage.py migrate


2. views.py
    a. Importar los modelos recién creados, para poder acceder a ellos:

        from .models import Funcionario, Paciente
    
    b. Crear una clase para el formulario. Esta clase se puede agregar en un forms.py y luego importarlo a views. En este caso lo hice
        directamente en views.py.

        class AgregaFuncionarioForm(forms.Form):
            rut = forms.CharField(label="RUT")
            nombre = forms.CharField(label = "Nombre")
            apellidos = forms.CharField(label="Apellidos")
            ... etc

    b. Crear un view que tenga acceso al formulario recién creado.
        def agregar_usuario(request):
            return render(request, 
                  "user_manager/agregar.html", 
                  {'formulario': AgregaFuncionarioForm(request.POST), #request.POST solicita envío})
                   


    c. Importar el módulo de formularios de django:

        from django import forms


    e. Agregar la variable del formulario recién creado al view, para que se pueda tener acceso desde el html.

        def agregar_usuario(request):
            return render(request, "user_manager/agregar.html", {'formulario': AgregaFuncionarioForm, 'funcionarios': Funcionario.objects.all(), 'pacientes': Paciente.objects.all()})

3. Hacer un template donde se creará la funcionalidad, en este caso se llamará agregar.html. Ademá de el 'extend' y el 'block', llevará
   lo siguiente:

        <h1>Agregar funcionario<h1>
    <form action="", method="POST">
        {% csrf_token %}
        <table>
            {{ formulario}}
        </table>
        <button type="submit">Enviar</button>
    </form>
    
    *   action="" determina con qué URL se trabajará(la ctual en este caso), y 'POST' es el método que se ejecutará al hacer submit,
        que en este caso empaquetará el formulario, lo codificará y lo enviará al servidor.
    **  'csrf_token' genera automáticamente un token único para identificar la sesión.
    *** {{formulario}} llama al formulario creado dentro de views.py, por el nombre que se le asignó a la variable en los atributos del
        respectivo render.

4. Modificamos el view del formulario en views.py para agregar lógica de verificación de los datos del formulario antes de ser enviado.


    def agregar_usuario(request):
    formulario = AgregaFuncionarioForm() #se guarda los datos llenados por el usuario en esta variable

    if request.method == "POST": #es decir, si esto es un request de tipo "POST", realizar lo siguiente:

        formulario = AgregaFuncionarioForm(request.POST) #crea una instancia del formulario, con los datos entregados por el usuario
        
        if formulario.is_valid(): # si el formulario es válido,
            funcionario = Funcionario() #para no escribirlo con mayúscula y paréntesis a cada rato

            #si el formularo está validado, cleaned_data convierte la información a un diccionario, donde se asigna
            y se 'normaliza' el value a un tipo de datos consistente.

            funcionario.rut = formulario.cleaned_data['rut'] 
            funcionario.nombre = formulario.cleaned_data['nombre']
            funcionario.apellidos = formulario.cleaned_data['apellidos']
            funcionario.género = formulario.cleaned_data['género']
            funcionario.fono = formulario.cleaned_data['fono']

            funcionario.dirección = formulario.cleaned_data['dirección'] 
            funcionario.mail = formulario.cleaned_data['mail']
            funcionario.contraseña = formulario.cleaned_data['contraseña']
            funcionario.cargo = formulario.cleaned_data['cargo']
            funcionario.especialidad = formulario.cleaned_data['especialidad']
            
            funcionario.vigencia = formulario.cleaned_data['vigencia']

            funcionario.save() #IMPORTANTE para que se almacene todo en la db
        else:
            print("Debe ingresar correctamente todos los campos")

        return redirect('agregar') #una vez enviado, redirige donde se le indique.

    context = {'formulario': formulario}

    return render(request,"user_manager/agregar.html", context)







def crear_profesor(request):
    form = ProfesorForm()

    if request.method == "POST":
        print(request)
        form = ProfesorForm(request.POST)

        if form.is_valid():
            print(form)
            profesor = Profesor()
            profesor.nombre = form.cleaned_data['nombre']
            profesor.apellido = form.cleaned_data['apellido']
            profesor.edad = form.cleaned_data['edad']
            profesor.email = form.cleaned_data['email']
            profesor.celular = form.cleaned_data['celular']
            profesor.telefono = form.cleaned_data['telefono']
            profesor.egreso = form.cleaned_data['egreso']
            profesor.fecha_contratacion = form.cleaned_data['fecha_contratacion']
            profesor.save()
        else:
            print("Datos invalidos")
        return redirect('/home')
    
    context = {
        'form': form
    }

    return render(request, 'profesor_formulario.html', context=context)
    

     

HABILITAR MENSAJES:

https://docs.djangoproject.com/en/4.2/ref/contrib/messages/


AUTENTICACIÓN

1. urls.py de nuestra APP:

    a. agregar un urlpattern para dar acceso a nuestro view desde el enpoint /login

        path("login", views.login_view, name = "login")    

    b. agregar otro urlpattern, esta vez para dar acceso al view de /logout

        path("logout", views.logout_view, name = "logout")

2. views.py:

    a. Ahora crearemos una función para revisar si el usuario está autenticado.

        i. Primero, la función. Con esta función, si el usuario no está autenticado, se  redirigirá
           a login_view.

            def check_login(request):
                if not request.user.is_authenticated:
                return HttpResponseRedirect(reverse("login"))
        
        ii. Se debe importar HttpResponseRedirect desde django.http y reverse desde django.urls

    b. Luego, se crea un view login_view:

        def login_view(request):
            return render(request, "clinicapp/login.html")

3. template login.html:

    En el template, además del código típico de cada template, haremos un formulario:

        <form action="{% url 'login' %}" method = "post"> 
        {%csrf_token%}
        <input type="text" name = "usuario" placeholder = "Usuario">
        <input type="password" name = "password" placeholder = "Contraseña">
        <input type="submit" name = "Login" placeholder = "Usuario">
        <form>

        #type='password' oculta los caracteres escritos (*********)
        