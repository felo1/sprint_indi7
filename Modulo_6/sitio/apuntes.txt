1. Crear entorno virtual:
    python3 -m venv .venv #. para que git lo ignore

2. Importar Django:
    pip install django

3. Guardar versiones y módulos importados:
    pip freeze > requirements.txt

4. Crear proyecto:
    django-admin startproject sitio

5. Crear app (dentro de la carpeta del proyecto):
    django-admin startapp sitio_app

6. agregar APP a settings.py:
    agregar 'landing' a la lista 'INSTALLED_APPS'

7. modificar views.py en carpeta de APP:
  
   -Request representa el request que hace el usuario al servidor

    def index(request):
        return(render(request, "landing/index.html")) #se agrega render para indicar que debe renderizar el template indicado.

    #esa ubicación dirige a un template (index.html) ubicado en la carpeta de la app/templates/app, que hay que crear.

8. Crear urls.py de APP:

    from django.urls import path #para que pueda acceder al urls.py del PROYECTO
    from . import views #para que se pueda acceder a views.py
    urlpatterns = [
        path("", views.index, name = "index")]

        # "" está vacío porque no se le dará argumentos al final de la ruta
        # views.index es la función de views.py, que define qué se mostrará
        # name = "index" se le da nombre, para poder referenciarlo desde otras apps.

9. Modificar urls.py de PROYECTO:

    -agregar 'include' al import de django.urls:
        from django.urls import include, path

    -agregar un item a url_patterns:
        path('landing', include("landing.urls")) # para poder usar urls.py de la APP
    
10. Iniciar servidor en la terminal:

    python3 manage.py runserver



Para agregar template con bootstrap:

https://www.w3schools.com/django/django_add_bootstrap5.php



ADMIN

You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.

hay un service manager para cada tipo de DB. EN Sqlite3 es dbbrowser (python manage.py migrate)

tabla auth:user

select * from auth_user
  sino directo por shell

 python3 manage.py createsuperuser

select * from auth_user : muestra password encriptada

    models.py > migrate
    nombreclase(models.Model)
        def init
           self. atributo  = models.charfield(maxlenght bla bla)
           NO USA INIT__


los modelos también se debe registrar en admin.py

debe tener from .import models
admin.site.register(model.nombreclase) #ahora aparece en la db al verla en el admin

cada vez que se hace un cambio en un modelo hay que migrar



tarea 3.

1. crear usuarios en admin. Cada usuario tendrá nombre, apellido y mail (3 atributos)
2. en el index.html de la carpeta templates/mi_app se hará una lista ordenada que tendrá un loop for para cada usuario.
3. en el views.py se dará un tercer atributo, un diccionario asociado a una variable (que se define en el mismo views, 
pero antes de la función index), que a su vez va a sacar datos de la base de datos.